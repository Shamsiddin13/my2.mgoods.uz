<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\OrderResource\Pages\ListOrders;
use App\Models\Order;
use Carbon\Carbon;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Select;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\Indicator;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;

class OrderResource extends Resource
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationIcon = 'heroicon-o-shopping-cart';

    protected static ?string $navigationLabel = "Buyurtmalar";

    protected static ?string $pluralModelLabel = "Buyurtmalar";

    protected static ?int $navigationSort = 1;

    public static function getNavigationBadge(): ?string
    {
        $user = Auth::user();
        return static::getModel()::where('source', $user->source)->count(); // TODO: Change the autogenerated stub
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('ID_number')->label('ID')->searchable()->toggleable()->sortable(),
                TextColumn::make('createdAt')->label('Buyurtma sanasi')->sortable()->toggleable()->dateTime(),
                TextColumn::make('displayProductName')->label('Mahsulot')->searchable()->toggleable()->sortable(),
                TextColumn::make('article')->label('Artikul')->searchable()->toggleable()->sortable(),
                TextColumn::make('status')->searchable()->toggleable()->sortable()
                    ->label('Holat')
                    ->badge()
                    ->formatStateUsing(function (string $state): string{
                        return match ($state) {
                            'new' => 'Yangi',
                            'updated' => 'Yangilandi',
                            'recall' => "Qayta qo'ng'iroq",
                            'call_late' => 'Kegin oladi',
                            'cancel' => 'Otkaz',
                            'accept' => 'Qabul',
                            'send' => 'Yuborildi',
                            'delivered' => 'Yetkazildi',
                            'returned' => 'Qaytib keldi',
                            'sold' => 'Sotildi',
                            default => 'null'
                        };
                    })
                    ->color(function (string $state): string{
                        return match ($state) {
                            'new' => 'warning',
                            'updated' => 'info',
                            'recall' => 'gray',
                            'call_late' => 'gray',
                            'cancel' => 'danger',
                            'accept' => 'success',
                            'send' => 'info',
                            'delivered' => 'success',
                            'returned' => 'danger',
                            'sold' => 'success',
                            default => 'null'
                        };
                    })
                    ->icon(function (string $state): ?string {
                        return match ($state) {
                            'new' => 'heroicon-o-sparkles',
                            'updated' => 'heroicon-o-arrow-path',
                            'recall' => "heroicon-o-phone-arrow-up-right",
                            'call_late' => 'heroicon-o-phone',
                            'cancel' => 'heroicon-o-x-circle',
                            'accept' => 'heroicon-o-check-circle',
                            'send' => 'heroicon-o-truck',
                            'delivered' => 'heroicon-o-check-badge',
                            'returned' => 'heroicon-o-x-circle',
                            'sold' => 'heroicon-o-check-badge',
                            default => null,
                        };
                    }),
                TextColumn::make('statusUpdatedAt')->label("Oxirgi o'zgarish")->dateTime()->toggleable()->sortable(),
                TextColumn::make('source')->label('Source')->searchable()->toggleable()->sortable(),
                TextColumn::make('target')->label('Target')->money('USD', true)->searchable()->toggleable()->sortable(),
            ])
            ->defaultSort("createdAt", 'desc')
            ->paginated([
                10,
                15,
                25,
                40,
                50,
                100,
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('article')
                    ->options(Order::getAllArticleGroupedBy('source', auth()->user()->source)->pluck('article', 'article')->toArray())
                    ->label('Artikul')
                    ->placeholder("artikul nomi ..")
                    ->preload()
                    ->multiple()
                    ->indicator('Artikul'),
                Tables\Filters\SelectFilter::make('displayProductName')
                    ->options(Order::getAllProductNameGroupedBy('source', auth()->user()->source)->pluck('displayProductName', 'displayProductName')->toArray())
                    ->label('Mahsulot Nomi')
                    ->placeholder("mahsulot nomi ..")
                    ->preload()
                    ->multiple()
                    ->indicator('Mahsulot Nomi'),
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'new' => 'Yangi',
                        'updated' => 'Yangilandi',
                        'recall' => "Qayta qo'ng'giroq",
                        'call_late' => 'Kegin oladi',
                        'cancel' => 'Otkaz',
                        'accept' => 'Qabul',
                        'send' => 'Yuborildi',
                        'delivered' => 'Yetkazildi',
                        'returned' => 'Qaytib keldi',
                        'sold' => 'Sotildi',
                    ])
                    ->label('Holat')
                    ->preload()
                    ->multiple()
                    ->indicator('Holat'),
                Filter::make('date_filter')
                    ->form([
                        Select::make('date_column')
                            ->label("Sana bo'yicha filterlash")
                            ->options([
                                'createdAt' => 'Buyurtma sanasi',
                                'statusUpdatedAt' => "Oxirgi o'zgarish sanasi",
                            ])
                            ->required()
                            ->reactive()
                            ->placeholder("Tanlang"),  // Make sure the user selects one
                        DatePicker::make('date_from')
                            ->label(fn (callable $get) =>
                            match ($get('date_column')) {
                                'statusUpdatedAt' => "Oxirgi o'zgarish sanasi (dan)",
                                'createdAt' => 'Buyurtma sanasi (dan)',
                                default => 'Sana (dan)',
                            }
                            )
                            ->reactive(),

                        DatePicker::make('date_until')
                            ->label(fn (callable $get) =>
                            match ($get('date_column')) {
                                'statusUpdatedAt' => "Oxirgi o'zgarish sanasi (gacha)",
                                'createdAt' => 'Buyurtma sanasi (gacha)',
                                default => 'Sana (gacha)',
                            }
                            )
                            ->reactive(),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        $column = $data['date_column'] ?? 'createdAt';  // Default to 'created_at' if nothing is selected

                        return $query
                            ->when(
                                $data['date_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate($column, '>=', $date),
                            )
                            ->when(
                                $data['date_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate($column, '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];

                        if ($data['date_column']) {
                            $columnLabel = $data['date_column'] === 'createdAt' ? 'Buyurtma sanasi' : "Oxirgi o'zgarish";
                        } else {
                            $columnLabel = 'Buyurtma sanasi';  // Default label
                        }

                        if ($data['date_from'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (dan) ' . Carbon::parse($data['date_from'])->toFormattedDateString())
                                ->removeField('date_from');
                        }

                        if ($data['date_until'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (gacha) ' . Carbon::parse($data['date_until'])->toFormattedDateString())
                                ->removeField('date_until');
                        }

                        return $indicators;
                    }),
            ])
            ->actions([
            ])
            ->bulkActions([
            ]);
    }

    public static function getRelations(): array
    {
        return [
            // Define any relationships here
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => ListOrders::route('/'),
        ];
    }

}
