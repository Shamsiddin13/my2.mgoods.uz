<?php

namespace App\Filament\Storekeeper\Resources;

use App\Filament\Storekeeper\Resources\WarehouseDetailsResource\Pages;
use App\Models\Product;
use App\Models\WarehouseDetails;
use Filament\Forms;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;

class WarehouseDetailsResource extends Resource
{
    protected static ?string $model = WarehouseDetails::class;

    protected static ?string $navigationIcon = 'heroicon-o-circle-stack';

    protected static ?string $navigationLabel = 'Ombor tafsilotlari';
    protected static ?string $pluralLabel = 'Ombor tafsilotlari';

    protected static ?int $navigationSort = 1;

    public static function getNavigationBadge(): ?string
    {
        $user = Auth::user();
        return static::getModel()::count(); // TODO: Change the autogenerated stub
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()->with('warehouse');
    }

    public static function form(Form $form): Form
    {
        return $form->schema([
            Forms\Components\Group::make()
                ->schema([
                Forms\Components\Section::make()
                    ->schema([
                    Forms\Components\Select::make('store')
                        ->label("Do'kon")
                        ->required()
                        ->columnSpan([
                            'lg' => 3   // Span 3 of 12 columns on large screens
                        ])
                        ->validationMessages([
                            'required' => "Do'kon maydonini kiritish shart"
                        ])
                        ->searchable()
                        ->searchPrompt("do'kon nomi bo'yicha qidiring ..")
                        ->placeholder("Do'konni tanglang ..")
                        ->options(Product::groupBy('store')->whereNotNull('store')->pluck('store', 'store'))
                        ->reactive(),
                    Select::make('article')
                        ->label('Mahsulot nomi')
                        ->required()
                        ->validationMessages([
                            'required' => "Mahsulot nomi maydonini kiritish shart"
                        ])
                        ->searchable(['article', 'name'])
                        ->searchPrompt("artikul yoki mahsulot nomi bo'yicha qidiring ..")
                        ->placeholder('Mahsulotni tanglang ..')
                        ->columnSpan([
                            'lg' => 7   // Span 3 of 12 columns on large screens
                        ])
                        ->dehydrated()
                        ->disabled(fn(callable $get) => empty($get('store')))
                        ->options(fn(callable $get) => !empty($get('store')) ? Product::where('store', $get('store'))->get()
                            ->pluck('name', 'article')
                            ->map(fn($article, $name) => "$name | $article") : [])
                        ->reactive()
                        ->afterStateUpdated(function ($state, callable $get, callable $set) {
                            if (!empty($state)) {
                                $selected_product = Product::where('article', explode(' | ', $state)[0] ?? null)->first();
                                $set('product_name', $selected_product->name ?? null);
                            } else {
                                $set('product_name', null);
                            }
                        }),
                    TextInput::make('article')
                            ->label('Artikul')
                            ->readonly()
                            ->disabled()
                            ->dehydrated()
                            ->columnSpan(['lg' => 2]),
                    Select::make('type')
                        ->label('Type')
                        ->placeholder('Kirim yoki Chiqim tanlang ..')
                        ->required()
                        ->validationMessages([
                            'required' => "Ombor operatsiya turini kiritish shart"
                        ])
                        ->columnSpan([
                            'lg' => 2   // Span 3 of 12 columns on large screens
                        ])
                        ->options([
                            'income' => 'Kirim',
                            'outcome' => 'Chiqim',
                        ]),
                    Forms\Components\TextInput::make('quantity')
                        ->label('Miqdor')
                        ->numeric()
                        ->required()
                        ->columnSpan([
                            'lg' => 2   // Span 3 of 12 columns on large screens
                        ])
                        ->validationMessages([
                            'required' => "Miqdor maydonini kiritish shart"
                        ])
                        ->afterStateUpdated(function ($state, callable $get, callable $set) {
                            if (!empty($state)) {
                                $selected_product = Product::where('article',$get('article'))->first();
                                $set('total_price', $get('quantity') * $selected_product->buyPrice ?? 0.00);
                            } else {
                                $set('total_price', 0.00);
                            }
                        }),
                    Forms\Components\Textarea::make('comment')
                        ->label('Izoh')
                        ->columnSpan(['lg' => 4]),
                    Hidden::make('total_price')
                        ->dehydrated(),
                    Hidden::make('product_name')
                        ->dehydrated(),
                    Hidden::make('user_id')
                        ->dehydrated()
                        ->default(auth()->user()->id)
                    ])->columns(10)
            ])->columnSpanFull()
        ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label('ID')
                    ->sortable()
                    ->toggleable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('store')
                    ->label("Do'kon")
                    ->sortable()
                    ->toggleable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('product_name')
                    ->label("Mahsulot nomi")
                    ->sortable()
                    ->toggleable()
                    ->limit(20)
                    ->tooltip(fn($record) => $record->product_name)
                    ->searchable(),
                Tables\Columns\TextColumn::make('article')
                    ->label('Artikul')
                    ->sortable()
                    ->toggleable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('type')
                    ->label('Type')
                    ->sortable()
                    ->toggleable()
                    ->searchable()
                    ->badge()
                    ->icon(function ($record) {
                        return $record->type === 'income' ? 'heroicon-m-plus-circle' : 'heroicon-m-minus-circle';
                    })
                    ->colors([
                        'success' => 'income',
                        'danger' => 'outcome',
                    ]),
                Tables\Columns\TextColumn::make('quantity')
                    ->label('Miqdor')
                    ->sortable()
                    ->toggleable(),
                Tables\Columns\TextColumn::make('total_price')
                    ->label('Umumiy summa')
                    ->sortable()
                    ->toggleable()
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' ')),
                Tables\Columns\TextColumn::make('comment')
                    ->label('Izoh')
                    ->toggleable()
                    ->limit(5)
                    ->tooltip(fn($record) => $record->comment),
                Tables\Columns\TextColumn::make('created_at')
                    ->date()
                    ->toggleable()
                    ->sortable()
                    ->tooltip(fn($record) => $record->created_at->format('Y-m-d H:i:s')),
                Tables\Columns\TextColumn::make('updated_at')
                    ->date()
                    ->toggleable()
                    ->toggledHiddenByDefault()
                    ->sortable()
                    ->tooltip(fn($record) => $record->updated_at->format('Y-m-d H:i:s')),
            ])
            ->defaultSort('created_at', 'desc')
            ->filters([
                //
            ])
            ->actions([
                ActionGroup::make([
                    Tables\Actions\EditAction::make()->label('Tahrirish'),
                    Tables\Actions\DeleteAction::make()->label("O'chirish"),
                    Tables\Actions\ViewAction::make()->label("Batafsil ko'rish"),
                ]),
            ])
            ->bulkActions([
//                Tables\Actions\BulkActionGroup::make([
//                    Tables\Actions\DeleteBulkAction::make(),
//                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListWarehouseDetails::route('/'),
//            'create' => Pages\CreateWarehouseDetails::route('/create'),
//            'edit' => Pages\EditWarehouseDetails::route('/{record}/edit'),
        ];
    }
}
