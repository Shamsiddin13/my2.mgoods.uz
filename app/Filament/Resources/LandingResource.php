<?php

namespace App\Filament\Resources;

use App\Filament\Resources\LandingResource\Pages;
use App\Filament\Resources\LandingResource\RelationManagers;
use App\Models\Landing;
use App\Models\Product;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Form;
use \Filament\Forms\Components\Group;
use Filament\Infolists\Components\ColorEntry;
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Support\Enums\FontWeight;
use Filament\Tables;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class LandingResource extends Resource
{
    protected static ?string $model = Landing::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count(); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Create a Landing')
                    ->collapsible()
                    ->schema([
                        Select::make('store')
                            ->label('Store')
                            ->preload()
                            ->options(
                                Product::getAllStoresGroupedBy()->pluck('store', 'store')->toArray()
                            )
                            ->searchable()
                            ->required()
                             ->live(true)
                            ->afterStateUpdated(function (callable $set) {
                                // Clear the article field when the store is changed
                                $set('article', null);
                            }),

                        Select::make('article')
                            ->label('Article')
                            ->preload()
                            ->options(function ($get) {
                                $store = $get('store');

                                if ($store) {
                                    return Product::where('store', $store)->pluck('article', 'article')->filter()->toArray();
                                }

                                return [];
                            })
                            ->searchable()
                            ->required(),
                        Textarea::make('title')->label('Title')->required(),
                        Textarea::make('subtitle')->label('Sibtitle')->required(),
                        Textarea::make('description')->label('Description')->required(),
                    ])->columnSpan(3)->columns(2),
                Group::make()->schema([
                    Section::make('Texts')
                        ->collapsible()
                        ->schema([
                            Textarea::make('text1')->label('First Text')->required(),
                            Textarea::make('text2')->label('Second Text')->required(),
                            Textarea::make('text3')->label('Third Text'),
                        ])->columnSpan(1)
                ]),
                Section::make('Images')
                    ->collapsible()
                    ->schema([
                        FileUpload::make('img1')->label('Main Image')->image()->required(),
                        FileUpload::make('img2')->label('First Image')->image()->required(),
                        FileUpload::make('img3')->label('Second Image')->image()->required(),
                        FileUpload::make('img4')->label('Third Image')->image()->required(),
                    ])->columnSpan([
                        'md' => 2,
                        'lg' => 0,
                        'xl' => 4,
                    ])->columns([
                        'md' => 2,
                        'lg' => 0,
                        'xl' => 4,
                    ]),
            ])->columns([
                'default' => 1,
                'md' => 2,
                'lg' => 3,
                'xl' => 4,
            ]);
    }
    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                TextEntry::make('title'),
                TextEntry::make('article'),
                TextEntry::make('description')
                    ->columnSpanFull(),
                TextEntry::make('link')
                    ->label('LINK')
                    ->columnSpanFull()
                    ->url(fn (Landing $record): string => '#' . urlencode($record->link)),
                ImageEntry::make('image'),
            ]);
    }
    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\Layout\Stack::make([
                    Tables\Columns\ImageColumn::make('img1')
                        ->height('100%')
                        ->width('100%'),
                    Tables\Columns\Layout\Stack::make([
                        Tables\Columns\TextColumn::make('title')
                            ->weight(FontWeight::Bold),
                        Tables\Columns\TextColumn::make('link')
                            ->formatStateUsing(fn (string $state): string => str($state)->after('://')->ltrim('www.')->trim('/'))
                            ->color('gray')
                            ->limit(30),
                        TextColumn::make("article")
                            ->label("Article")->searchable()
                    ]),
                ])->space(3),
                Tables\Columns\Layout\Panel::make([
                    Tables\Columns\Layout\Split::make([
                        Tables\Columns\TextColumn::make('description')
                            ->color('gray'),
                    ]),
                ])->collapsible(),
            ])
            ->filters([
                //
            ])
            ->contentGrid([
                'md' => 2,
                'xl' => 3,
            ])
            ->paginated([
                24,
                36,
                48,
                60,
                72,
                'all',
            ])
            ->actions([
                Tables\Actions\Action::make('visit')
                    ->label('Visit link')
                    ->icon('heroicon-m-arrow-top-right-on-square')
                    ->color('gray')
                    ->url(fn (Landing $record): string => '#' . urlencode($record->link)),
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->action(function () {
                            Notification::make()
                                ->title('Now, now, don\'t be cheeky, leave some records for others to play with!')
                                ->warning()
                                ->send();
                        }),
                ]),
            ]);
    }


    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListLandings::route('/'),
            'create' => Pages\CreateLanding::route('/create'),
            'view' => Pages\ViewLanding::route('/{record}'),
            'edit' => Pages\EditLanding::route('/{record}/edit'),
        ];
    }
}
