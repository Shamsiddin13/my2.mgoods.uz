<?php

namespace App\Filament\Superadmin\Resources;

use App\Filament\Superadmin\Resources\RequestFinResource\Pages;
use App\Models\RequestFin;
use App\Notifications\Target;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Select;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\BulkAction;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\Indicator;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection;

class RequestFinResource extends Resource
{
    protected static ?string $model = RequestFin::class;

    protected static ?string $navigationIcon = 'heroicon-o-banknotes';

    protected static ?string $pluralModelLabel = 'Request Finance';
    protected static ?string $navigationGroup = 'Finance';

    protected static ?int $navigationSort = 1;

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('status', 'new')->count(); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label(__('ID'))
                    ->toggleable()
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('user.name')
                    ->label(__('User'))
                    ->toggleable()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('user_type')
                    ->label(__('User Type'))
                    ->searchable()
                    ->sortable()
                    ->toggleable(),
                Tables\Columns\TextColumn::make('account')
                    ->label(__('Account'))
                    ->searchable()
                    ->sortable()
                    ->toggleable()
                    ->badge()
                    ->formatStateUsing(function ($state) {
                        if (is_numeric($state) && strlen((string)$state) === 16) {
                            return implode(' ', str_split((string)$state, 4));
                        }
                        return $state;
                    })
                    ->copyable()
                    ->copyMessage('Account number copied.')
                    ->icon('heroicon-s-credit-card'),
                Tables\Columns\TextColumn::make('amount')
                    ->label(__('Amount'))
                    ->searchable()
                    ->sortable()
                    ->toggleable()
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' ')),
                Tables\Columns\TextColumn::make('status')
                    ->label(__('Status'))
                    ->searchable()
                    ->badge()
                    ->colors([
                        'success' => 'approved',
                        'warning' => 'new',
                        'danger' => 'cancel',
                    ])
                    ->icon(function ($state) {
                        return match ($state) {
                            'approved' => 'heroicon-s-check-circle',
                            'cancel' => 'heroicon-s-x-circle',
                            'new' => 'heroicon-s-clock',
                            default => 'heroicon-s-question-mark-circle',
                        };
                    })
                    ->sortable()
                    ->toggleable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->date()
                    ->toggleable()
                    ->sortable()
                    ->tooltip(fn($record) => Carbon::parse($record->createdAt)->format('Y-m-d H:i:s')),
                Tables\Columns\TextColumn::make('updated_at')
                    ->date()
                    ->toggleable()
                    ->toggledHiddenByDefault()
                    ->sortable()
                    ->tooltip(fn($record) => Carbon::parse($record->updatedAt)->format('Y-m-d H:i:s')),

            ])
            ->defaultSort('created_at', 'DESC')
            ->paginated([
                10,
                15,
                25,
                40,
                50,
                100,
                'all'
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'new' => 'New',
                        'approved' => 'Approved',
                        'cancel' => 'Cancel',
                    ])
                    ->label('Status')
                    ->preload()
                    ->multiple()
                    ->indicator('Status'),
                Filter::make('date_filter')
                    ->form([
                        Select::make('date_column')
                            ->label("Filter by Created/Updated At")
                            ->options([
                                'created_at' => 'Created At',
                                'updated_at' => "Updated At",
                            ])
                            ->required()
                            ->reactive()
                            ->placeholder("Select the date column"),  // Make sure the user selects one
                        DatePicker::make('date_from')
                            ->label(fn (callable $get) =>
                            match ($get('date_column')) {
                                'created_at' => "From Created At",
                                'updated_at' => 'From Updated At',
                                default => 'From Date',
                            }
                            )
                            ->reactive(),

                        DatePicker::make('date_until')
                            ->label(fn (callable $get) =>
                            match ($get('date_column')) {
                                'created_at' => "Until Created At",
                                'updated_at' => 'Until Updated At',
                                default => 'Until Date',
                            }
                            )
                            ->reactive(),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        $column = $data['date_column'] ?? 'created_at';  // Default to 'created_at' if nothing is selected

                        return $query
                            ->when(
                                $data['date_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate($column, '>=', $date),
                            )
                            ->when(
                                $data['date_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate($column, '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];

                        if ($data['date_column']) {
                            $columnLabel = $data['date_column'] === 'created_at' ? 'Created At' : "Updated At";
                        } else {
                            $columnLabel = 'Created At';  // Default label
                        }

                        if ($data['date_from'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (from) ' . \Carbon\Carbon::parse($data['date_from'])->toFormattedDateString())
                                ->removeField('date_from');
                        }

                        if ($data['date_until'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (until) ' . Carbon::parse($data['date_until'])->toFormattedDateString())
                                ->removeField('date_until');
                        }

                        return $indicators;
                    }),
            ])
            ->actions([
//                Tables\Actions\EditAction::make(),
                Action::make('edit_status')
                    ->label('Edit Status')
                    ->icon('heroicon-s-pencil-square')
                    ->form([
                        Select::make('status')
                            ->label('Status')
                            ->options([
                                'approved' => 'Approved',
                                'cancel' => 'Cancel',
                            ])
                            ->required(),
                    ])
                    ->action(function (RequestFin $record, array $data) {
                        $oldStatus = $record->status;
                        $record->status = $data['status'];
                        $record->save();
                            // Fetch the associated user
                        $user = $record->user; // Assuming the RequestFin model has a 'user' relationship

                        // Notify the user
                        $user->notify(new Target($record, $record->status));
                    })
                    ->requiresConfirmation()
                    ->visible(fn (RequestFin $record) => $record->status === 'new'),

            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    BulkAction::make('edit_status')
                        ->label('Edit Status')
                        ->icon('heroicon-s-pencil-square')
                        ->color('primary')
                        ->form([
                            Select::make('status')
                                ->label('Status')
                                ->options([
                                    'approved' => 'Approved',
                                    'cancel' => 'Cancel',
                                ])
                                ->required(),
                        ])
                        ->action(function (Collection $records, array $data) {
                            foreach ($records as $record) {
                                $oldStatus = $record->status;
                                $record->status = $data['status'];
                                $record->save();

                                // Fetch the associated user
                                $user = $record->user; // Assuming the RequestFin model has a 'user' relationship

                                // Notify the user if the status has changed
                                if ($oldStatus !== $record->status) {
                                    $user->notify(new Target($record, $record->status));
                                }
                            }
                        })
                        ->requiresConfirmation()
                        ->modalHeading('Edit Status')
                        ->modalDescription('Change the status of the selected records.'),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListRequestFins::route('/'),
        ];
    }

}
