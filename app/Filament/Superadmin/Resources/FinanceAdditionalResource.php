<?php

namespace App\Filament\Superadmin\Resources;

use App\Filament\Superadmin\Resources\FinanceAdditionalResource\Pages;
use App\Models\FinanceAdditional;
use App\Models\User;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Radio;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class FinanceAdditionalResource extends Resource
{
    protected static ?string $model = FinanceAdditional::class;

    protected static ?string $navigationIcon = 'heroicon-o-currency-dollar';

    protected static ?string $navigationLabel = 'Finance Additionals';

    protected static ?string $pluralModelLabel = 'Finance Additionals';
    protected static ?string $navigationGroup = 'Finance';

    protected static ?int $navigationSort = 2;

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count(); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                // User Selection
                Select::make('for_user')
                    ->label('User')
                    ->options(User::whereIn('type', ['target', 'store', 'manager'])->pluck('username', 'id')->toArray())
                    ->searchable()
                    ->preload()
                    ->required()
                    ->afterStateUpdated(function ($state, $set) {
                        $user = User::find($state);
                        if ($user) {
                            $set('for_user', $user->username);
                            $set('for_user_type', $user->type);
                        }
                    }),
                // For User
                Hidden::make('user_id')
                    ->default(auth()->user()->id)
                    ->dehydrated(),
                // For User Type
                Hidden::make('for_user_type')
                    ->label('For User Type')
                    ->dehydrated(),
                // Type (in/out)
                Radio::make('type')
                    ->label('Type')
                    ->options([
                        'in' => 'In',
                        'out' => 'Out',
                    ])
                    ->default('in')
                    ->required(),

                // Amount
                TextInput::make('amount')
                    ->label('Amount')
                    ->numeric()
                    ->required(),

                // Description
                Textarea::make('description')
                    ->label('Description')
                    ->rows(3)
                    ->maxLength(1000)
                    ->nullable(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('user.username')
                    ->label('User')
                    ->sortable()
                    ->toggleable()
                    ->toggledHiddenByDefault()
                    ->searchable(),
                Tables\Columns\TextColumn::make('for_user')
                    ->label('For User')
                    ->searchable()
                    ->toggleable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('for_user_type')
                    ->label('For User Type')
                    ->searchable()
                    ->toggleable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('type')
                    ->label('Type')
                    ->toggleable()
                    ->badge()
                    ->colors([
                        'success' => 'in',
                        'danger' => 'out',
                    ])
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('amount')
                    ->label('Amount')
                    ->toggleable()
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' '))
                    ->sortable(),
                Tables\Columns\TextColumn::make('description')
                    ->label('Description')
                    ->toggleable()
                    ->limit(20)
                    ->tooltip(fn($record) => $record->description)
                    ->wrap(),
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Created At')
                    ->toggleable()
                    ->dateTime(),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Updated At')
                    ->toggleable()
                    ->toggledHiddenByDefault()
                    ->dateTime(),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\ViewAction::make()->label("View"),
                    Tables\Actions\EditAction::make()->label("Edit")
                        ->successNotification(Notification::make()
                            ->success()
                            ->title("Saved")
                            ->body("changes saved successfully.")),
                    Tables\Actions\DeleteAction::make()->label("Delete")
                        ->successNotification(Notification::make()
                            ->success()
                            ->title("Deleted")
                            ->body("deleted successfully.")),
                ])
            ])
            ->bulkActions([
//                Tables\Actions\BulkActionGroup::make([
//                    Tables\Actions\DeleteBulkAction::make(),
//                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFinanceAdditionals::route('/'),
//            'create' => Pages\CreateFinanceAdditional::route('/create'),
//            'edit' => Pages\EditFinanceAdditional::route('/{record}/edit'),
        ];
    }
}
