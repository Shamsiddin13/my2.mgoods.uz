<?php

namespace App\Filament\Manager\Resources;

use App\Filament\Manager\Resources\OrderResource\Pages;
use App\Models\Order;
use App\Models\Product;
use Carbon\Carbon;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Select;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\Indicator;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;

class OrderResource extends Resource
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationIcon = 'heroicon-o-shopping-bag';

    protected static ?string $navigationLabel = "Buyurtmalar";

    protected static ?string $pluralModelLabel = "Buyurtmalar";

    protected static ?int $navigationSort = 0;

    public static function getNavigationBadge(): ?string
    {
        $user = Auth::user();
        return static::getModel()::where('manager', $user->manager)
            ->whereBetween('createdAt', ['2024-08-01 00:00:00', now()])->count(); // TODO: Change the autogenerated stub
    }
    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->where('manager', auth()->user()->manager)
            ->whereBetween('createdAt', ['2024-08-01 00:00:00', now()]);
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('ID_number')->label('ID')->searchable()->toggleable()->sortable(),
                TextColumn::make('createdAt')->label("Buyurtma sanasi")->sortable()->toggleable()->dateTime(),
                TextColumn::make('store')->label("Do'kon")->searchable()->toggleable()->sortable(),
                TextColumn::make('displayProductName')->label('Mahsulot')->searchable()->toggleable()->sortable(),
                TextColumn::make('article')->label('Artikul')->searchable()->toggleable()->sortable(),
                TextColumn::make("summ")
                    ->label("Narxi")
                    ->sortable()
                    ->getStateUsing(fn($record) => Product::where('article', $record->article)->value('buyPrice'))
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' ')),
                TextColumn::make('status')->searchable()->toggleable()->sortable()
                    ->label('Holat')
                    ->badge()
                    ->color(fn(string $state): string => self::getStatusColor($state))
                    ->icon(fn(string $state): ?string => self::getStatusIcon($state)),
                TextColumn::make('manager')->label("Manager")
            ])->defaultSort("createdAt", 'desc')
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'Новый' => 'Новый',
                        'Принят' => 'Принят',
                        'Выполнен' => 'Выполнен',
                        'Доставлен' => 'Доставлен',
                        'Отмена' => 'Отмена',
                        'В пути' => 'В пути',
                        'Возврат' => 'Возврат',
                        'Недозвон' => 'Недозвон',
                    ])
                    ->label('Holat')
                    ->preload()
                    ->multiple()
                    ->indicator('Holat'),
                Filter::make('date_filter')
                    ->form([
                        Select::make('date_column')
                            ->label("Sana bo'yicha filterlash")
                            ->options([
                                'createdAt' => 'Buyurtma sanasi',
                                'statusUpdatedAt' => "Oxirgi o'zgarish sanasi",
                            ])
                            ->required()
                            ->reactive()
                            ->placeholder("Tanlang"),  // Make sure the user selects one
                        DatePicker::make('date_from')
                            ->label(fn (callable $get) =>
                            match ($get('date_column')) {
                                'statusUpdatedAt' => "Oxirgi o'zgarish sanasi (dan)",
                                'createdAt' => 'Buyurtma sanasi (dan)',
                                default => 'Sana (dan)',
                            }
                            )
                            ->reactive(),

                        DatePicker::make('date_until')
                            ->label(fn (callable $get) =>
                            match ($get('date_column')) {
                                'statusUpdatedAt' => "Oxirgi o'zgarish sanasi (gacha)",
                                'createdAt' => 'Buyurtma sanasi (gacha)',
                                default => 'Sana (gacha)',
                            }
                            )
                            ->reactive(),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        $column = $data['date_column'] ?? 'createdAt';  // Default to 'created_at' if nothing is selected

                        return $query
                            ->when(
                                $data['date_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate($column, '>=', $date),
                            )
                            ->when(
                                $data['date_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate($column, '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];

                        if ($data['date_column']) {
                            $columnLabel = $data['date_column'] === 'createdAt' ? 'Buyurtma sanasi' : "Oxirgi o'zgarish";
                        } else {
                            $columnLabel = 'Buyurtma sanasi';  // Default label
                        }

                        if ($data['date_from'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (dan) ' . Carbon::parse($data['date_from'])->toFormattedDateString())
                                ->removeField('date_from');
                        }

                        if ($data['date_until'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (gacha) ' . Carbon::parse($data['date_until'])->toFormattedDateString())
                                ->removeField('date_until');
                        }

                        return $indicators;
                    }),
            ])
            ->actions([
//                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
//                Tables\Actions\BulkActionGroup::make([
//                    Tables\Actions\DeleteBulkAction::make(),
//                ]),
            ]);
    }

    private static function getStatusColor(string $state): string
    {
        return match ($state) {
            'Новый' => 'warning',
            'Принят' => 'info',
            'Отмена' => 'danger',
            'В пути' => 'info',
            'Возврат' => 'gray',
            'Выполнен' => 'success',
            'Доставлен' => 'success',
            'Недозвон' => 'gray',
            default => 'null',
        };
    }

    private static function getStatusIcon(string $state): ?string
    {
        return match ($state) {
            'Новый' => 'heroicon-o-sparkles',
            'Принят' => 'heroicon-o-check-circle',
            'Отмена' => 'heroicon-o-x-circle',
            'В пути' => 'heroicon-o-truck',
            'Возврат' => 'heroicon-o-arrow-uturn-left',
            'Выполнен' => 'heroicon-o-check-badge',
            'Доставлен' => 'heroicon-o-check-badge',
            'Недозвон' => 'heroicon-o-face-frown',
            default => null,
        };
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListOrders::route('/'),
//            'create' => Pages\CreateOrder::route('/create'),
//            'edit' => Pages\EditOrder::route('/{record}/edit'),
        ];
    }
}
