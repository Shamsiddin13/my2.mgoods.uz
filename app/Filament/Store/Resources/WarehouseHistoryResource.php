<?php

namespace App\Filament\Store\Resources;

use App\Filament\Store\Resources\WarehouseHistoryResource\Pages;
use App\Models\Product;
use App\Models\WarehouseDetails;
use Carbon\Carbon;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\Indicator;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;

class WarehouseHistoryResource extends Resource
{
    protected static ?string $model = WarehouseDetails::class;
    protected static ?string $navigationGroup = 'Ombor';

    protected static ?int $navigationSort = 1;

    protected static ?string $navigationIcon = 'heroicon-o-circle-stack';
    protected static ?string $modelLabel = 'Ombor Tarixi';

    protected static ?string $pluralModelLabel = 'Ombor Tarixi';

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()->where('store', auth()->user()->store); // TODO: Change the autogenerated stub
    }

    public static function getNavigationBadge(): ?string
    {
        $user = Auth::user();
        return static::getModel()::where('store', $user->store)->count(); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('created_at')
                    ->label('Sana')
                    ->toggleable(),
                TextColumn::make('product_name')
                    ->label('Mahsulot nomi')
                    ->sortable()
                    ->toggleable()
                    ->tooltip(function ($record) {
                        // Assuming $record is an instance of your Landing model and has an 'article' field
                        $product = Product::where('name', $record->product_name)->first();

                        // Return the product name if found, otherwise return 'No Product'
                        return $product ? $product->article : 'No Product';
                    })
                    ->searchable(['article']),
                TextColumn::make("amount")
                    ->label("Miqdor")
                    ->searchable()
                    ->toggleable()
                    ->badge()
                    ->tooltip(function ($record) {
                        return $record->type === 'income' ? 'Kirim qilingan' : ($record->type === 'outcome' ? 'Chiqim qilingan' : '');
                    })
                    ->color(function ($record) {
                        return $record->type === 'income' ? 'success' : ($record->type === 'outcome' ? 'danger' : null);
                    }),
                TextColumn::make("comment")
                    ->label("Izoh")
                    ->searchable()
                    ->toggleable(),
            ])
            ->paginated([
                10,
                15,
                25,
                40,
                50,
                100,
            ])
            ->filters([
                Filter::make('created_at')
                    ->form([
                        DatePicker::make('created_from')->label("Tranzaksiya sana (dan)"),
                        DatePicker::make('created_until')->label("Tranzaksiya sana (gacha)"),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];

                        $columnLabel = 'Tranzaksiya sanasi';  // Default label

                        if ($data['created_from'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (dan) ' . Carbon::parse($data['created_from'])->toFormattedDateString())
                                ->removeField('created_from');
                        }

                        if ($data['created_until'] ?? null) {
                            $indicators[] = Indicator::make($columnLabel . ' (gacha) ' . Carbon::parse($data['created_until'])->toFormattedDateString())
                                ->removeField('created_until');
                        }

                        return $indicators;
                    }),
            ])
            ->actions([
            ])
            ->bulkActions([
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListWarehouseHistories::route('/'),
        ];
    }
}
