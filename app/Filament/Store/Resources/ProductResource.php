<?php

namespace App\Filament\Store\Resources;

use App\Filament\Store\Resources\ProductResource\Pages;
use App\Filament\Store\Resources\ProductResource\RelationManagers;
use App\Models\Product;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class ProductResource extends Resource
{
    protected static ?string $model = Product::class;
    protected static ?string $navigationIcon = 'heroicon-o-shopping-bag';
    protected static ?string $navigationLabel = "Mahsulotlar";

    protected static ?string $pluralModelLabel = "Mahsulotlar";
    protected static int $globalSearchResultsLimit = 20;
    protected static ?int $navigationSort = 0;
    public static function getGloballySearchableAttributes(): array
    {
        return ['article', 'name']; // TODO: Change the autogenerated stub
    }

    public static function getGlobalSearchResultTitle(Model $record): string
    {
        return $record->name; // TODO: Change the autogenerated stub
    }

    public static function getGlobalSearchResultDetails(Model $record): array
    {
        return [
            'Name' => $record->name,
            'Article' => $record->article
        ]; // TODO: Change the autogenerated stub
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('store', auth()->user()->store)->count(); // TODO: Change the autogenerated stub
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()->where('store', auth()->user()->store);// TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label('ID')
                    ->sortable()
                    ->toggleable()
                    ->toggledHiddenByDefault(),
                ImageColumn::make('image')
                    ->label('Image')
                    ->height('25%')
                    ->width('25%'),
                TextColumn::make('name')
                    ->label('Mahsulot nomi')
                    ->sortable()->searchable()->toggleable(),
                TextColumn::make('article')
                    ->label('Artikul')
                    ->sortable()->searchable()->toggleable(),
                TextColumn::make('buyPrice')
                    ->label('Kassa narxi')
                    ->sortable()->searchable()->toggleable()
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' ')),
                TextColumn::make('salePrice')
                    ->label('Sotuv narxi')
                    ->sortable()->searchable()->toggleable()
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' ')),
                TextColumn::make('target')
                    ->label('Bonus')
                    ->sortable()->toggleable()
                    ->formatStateUsing(fn($state) => number_format($state, 0, '.', ' ')),
                TextColumn::make('status')
                    ->label('Holat')
                    ->sortable()->searchable()->toggleable()
                    ->badge()
                    ->color(fn (string $state): string => self::getStatusColor($state)),
            ])
            ->filters([
                //
            ])
            ->actions([
//                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
//                Tables\Actions\BulkActionGroup::make([
//                    Tables\Actions\DeleteBulkAction::make(),
//                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListProducts::route('/'),
//            'create' => Pages\CreateProduct::route('/create'),
//            'edit' => Pages\EditProduct::route('/{record}/edit'),
        ];
    }
    private static function getStatusColor(string $state): string
    {
        return match ($state) {
            'Yopiq' => 'danger',
            'Ochiq' => 'success',
            default => 'null',
        };
    }
}
